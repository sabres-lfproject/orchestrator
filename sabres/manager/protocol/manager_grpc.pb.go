// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: manager.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateSlice_FullMethodName    = "/mgmtproto.Manager/CreateSlice"
	Manager_DeleteSlice_FullMethodName    = "/mgmtproto.Manager/DeleteSlice"
	Manager_ShowSlice_FullMethodName      = "/mgmtproto.Manager/ShowSlice"
	Manager_ConfigureSlice_FullMethodName = "/mgmtproto.Manager/ConfigureSlice"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateSlice(ctx context.Context, in *CreateSliceRequest, opts ...grpc.CallOption) (*CreateSliceResponse, error)
	DeleteSlice(ctx context.Context, in *DeleteSliceRequest, opts ...grpc.CallOption) (*DeleteSliceResponse, error)
	ShowSlice(ctx context.Context, in *ShowSliceRequest, opts ...grpc.CallOption) (*ShowSliceResponse, error)
	ConfigureSlice(ctx context.Context, in *ConfigureSliceRequest, opts ...grpc.CallOption) (*ConfigureSliceResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateSlice(ctx context.Context, in *CreateSliceRequest, opts ...grpc.CallOption) (*CreateSliceResponse, error) {
	out := new(CreateSliceResponse)
	err := c.cc.Invoke(ctx, Manager_CreateSlice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteSlice(ctx context.Context, in *DeleteSliceRequest, opts ...grpc.CallOption) (*DeleteSliceResponse, error) {
	out := new(DeleteSliceResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteSlice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ShowSlice(ctx context.Context, in *ShowSliceRequest, opts ...grpc.CallOption) (*ShowSliceResponse, error) {
	out := new(ShowSliceResponse)
	err := c.cc.Invoke(ctx, Manager_ShowSlice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ConfigureSlice(ctx context.Context, in *ConfigureSliceRequest, opts ...grpc.CallOption) (*ConfigureSliceResponse, error) {
	out := new(ConfigureSliceResponse)
	err := c.cc.Invoke(ctx, Manager_ConfigureSlice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateSlice(context.Context, *CreateSliceRequest) (*CreateSliceResponse, error)
	DeleteSlice(context.Context, *DeleteSliceRequest) (*DeleteSliceResponse, error)
	ShowSlice(context.Context, *ShowSliceRequest) (*ShowSliceResponse, error)
	ConfigureSlice(context.Context, *ConfigureSliceRequest) (*ConfigureSliceResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateSlice(context.Context, *CreateSliceRequest) (*CreateSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlice not implemented")
}
func (UnimplementedManagerServer) DeleteSlice(context.Context, *DeleteSliceRequest) (*DeleteSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlice not implemented")
}
func (UnimplementedManagerServer) ShowSlice(context.Context, *ShowSliceRequest) (*ShowSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSlice not implemented")
}
func (UnimplementedManagerServer) ConfigureSlice(context.Context, *ConfigureSliceRequest) (*ConfigureSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureSlice not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSlice(ctx, req.(*CreateSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteSlice(ctx, req.(*DeleteSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ShowSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ShowSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ShowSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ShowSlice(ctx, req.(*ShowSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ConfigureSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ConfigureSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ConfigureSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ConfigureSlice(ctx, req.(*ConfigureSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mgmtproto.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSlice",
			Handler:    _Manager_CreateSlice_Handler,
		},
		{
			MethodName: "DeleteSlice",
			Handler:    _Manager_DeleteSlice_Handler,
		},
		{
			MethodName: "ShowSlice",
			Handler:    _Manager_ShowSlice_Handler,
		},
		{
			MethodName: "ConfigureSlice",
			Handler:    _Manager_ConfigureSlice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}
