// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: network.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GraphManager_CreateGraph_FullMethodName     = "/protocol.GraphManager/CreateGraph"
	GraphManager_DeleteGraph_FullMethodName     = "/protocol.GraphManager/DeleteGraph"
	GraphManager_ShowGraph_FullMethodName       = "/protocol.GraphManager/ShowGraph"
	GraphManager_RequestSolution_FullMethodName = "/protocol.GraphManager/RequestSolution"
	GraphManager_SetCBSLocation_FullMethodName  = "/protocol.GraphManager/SetCBSLocation"
)

// GraphManagerClient is the client API for GraphManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphManagerClient interface {
	CreateGraph(ctx context.Context, in *CreateGraphRequest, opts ...grpc.CallOption) (*CRUDGraphResponse, error)
	DeleteGraph(ctx context.Context, in *DeleteGraphRequest, opts ...grpc.CallOption) (*CRUDGraphResponse, error)
	ShowGraph(ctx context.Context, in *ShowGraphRequest, opts ...grpc.CallOption) (*ShowGraphResponse, error)
	RequestSolution(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveResponse, error)
	SetCBSLocation(ctx context.Context, in *SetCBSRequest, opts ...grpc.CallOption) (*SetCBSResponse, error)
}

type graphManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphManagerClient(cc grpc.ClientConnInterface) GraphManagerClient {
	return &graphManagerClient{cc}
}

func (c *graphManagerClient) CreateGraph(ctx context.Context, in *CreateGraphRequest, opts ...grpc.CallOption) (*CRUDGraphResponse, error) {
	out := new(CRUDGraphResponse)
	err := c.cc.Invoke(ctx, GraphManager_CreateGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphManagerClient) DeleteGraph(ctx context.Context, in *DeleteGraphRequest, opts ...grpc.CallOption) (*CRUDGraphResponse, error) {
	out := new(CRUDGraphResponse)
	err := c.cc.Invoke(ctx, GraphManager_DeleteGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphManagerClient) ShowGraph(ctx context.Context, in *ShowGraphRequest, opts ...grpc.CallOption) (*ShowGraphResponse, error) {
	out := new(ShowGraphResponse)
	err := c.cc.Invoke(ctx, GraphManager_ShowGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphManagerClient) RequestSolution(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveResponse, error) {
	out := new(SolveResponse)
	err := c.cc.Invoke(ctx, GraphManager_RequestSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphManagerClient) SetCBSLocation(ctx context.Context, in *SetCBSRequest, opts ...grpc.CallOption) (*SetCBSResponse, error) {
	out := new(SetCBSResponse)
	err := c.cc.Invoke(ctx, GraphManager_SetCBSLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphManagerServer is the server API for GraphManager service.
// All implementations must embed UnimplementedGraphManagerServer
// for forward compatibility
type GraphManagerServer interface {
	CreateGraph(context.Context, *CreateGraphRequest) (*CRUDGraphResponse, error)
	DeleteGraph(context.Context, *DeleteGraphRequest) (*CRUDGraphResponse, error)
	ShowGraph(context.Context, *ShowGraphRequest) (*ShowGraphResponse, error)
	RequestSolution(context.Context, *SolveRequest) (*SolveResponse, error)
	SetCBSLocation(context.Context, *SetCBSRequest) (*SetCBSResponse, error)
	mustEmbedUnimplementedGraphManagerServer()
}

// UnimplementedGraphManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGraphManagerServer struct {
}

func (UnimplementedGraphManagerServer) CreateGraph(context.Context, *CreateGraphRequest) (*CRUDGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGraph not implemented")
}
func (UnimplementedGraphManagerServer) DeleteGraph(context.Context, *DeleteGraphRequest) (*CRUDGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGraph not implemented")
}
func (UnimplementedGraphManagerServer) ShowGraph(context.Context, *ShowGraphRequest) (*ShowGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowGraph not implemented")
}
func (UnimplementedGraphManagerServer) RequestSolution(context.Context, *SolveRequest) (*SolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSolution not implemented")
}
func (UnimplementedGraphManagerServer) SetCBSLocation(context.Context, *SetCBSRequest) (*SetCBSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCBSLocation not implemented")
}
func (UnimplementedGraphManagerServer) mustEmbedUnimplementedGraphManagerServer() {}

// UnsafeGraphManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphManagerServer will
// result in compilation errors.
type UnsafeGraphManagerServer interface {
	mustEmbedUnimplementedGraphManagerServer()
}

func RegisterGraphManagerServer(s grpc.ServiceRegistrar, srv GraphManagerServer) {
	s.RegisterService(&GraphManager_ServiceDesc, srv)
}

func _GraphManager_CreateGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphManagerServer).CreateGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphManager_CreateGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphManagerServer).CreateGraph(ctx, req.(*CreateGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphManager_DeleteGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphManagerServer).DeleteGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphManager_DeleteGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphManagerServer).DeleteGraph(ctx, req.(*DeleteGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphManager_ShowGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphManagerServer).ShowGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphManager_ShowGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphManagerServer).ShowGraph(ctx, req.(*ShowGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphManager_RequestSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphManagerServer).RequestSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphManager_RequestSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphManagerServer).RequestSolution(ctx, req.(*SolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphManager_SetCBSLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCBSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphManagerServer).SetCBSLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphManager_SetCBSLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphManagerServer).SetCBSLocation(ctx, req.(*SetCBSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphManager_ServiceDesc is the grpc.ServiceDesc for GraphManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.GraphManager",
	HandlerType: (*GraphManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGraph",
			Handler:    _GraphManager_CreateGraph_Handler,
		},
		{
			MethodName: "DeleteGraph",
			Handler:    _GraphManager_DeleteGraph_Handler,
		},
		{
			MethodName: "ShowGraph",
			Handler:    _GraphManager_ShowGraph_Handler,
		},
		{
			MethodName: "RequestSolution",
			Handler:    _GraphManager_RequestSolution_Handler,
		},
		{
			MethodName: "SetCBSLocation",
			Handler:    _GraphManager_SetCBSLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
